{"remainingRequest":"/var/www/work/foliovue1/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/work/foliovue1/src/components/GoTop.vue?vue&type=script&lang=js&","dependencies":[{"path":"/var/www/work/foliovue1/src/components/GoTop.vue","mtime":1558692359954},{"path":"/var/www/work/foliovue1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/work/foliovue1/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/var/www/work/foliovue1/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/var/www/work/foliovue1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/work/foliovue1/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { throttle } from 'throttle-debounce';\nimport SweetScroll from 'sweet-scroll';\n\nconst KEY_ENTER = 13;\nconst RIPPLE_DURATION = 750;\nconst THROTTLE_DELAY = 100;\n\nconst makeBgImage = (weight, fgColor) => {\n    const color = fgColor.replace(/^#/, '');\n    if (weight === 'bold') {\n        return 'data:image/svg+xml;charset=utf8, %3Csvg version=%271.1%27 xmlns=%27http://www.w3.org/2000/svg%27 width=%2710px%27 height=%2710px%27%3E %3Cpolygon fill=%27%23' + color + '%27 stroke=%27none%27 points=%278.646,7.354 5,3.707 1.354,7.354 0.646,6.646 5,2.293 9.354,6.646%27 /%3E %3C/svg%3E';\n    }\n    return 'data:image/svg+xml;charset=utf8,%3Csvg version=%271.1%27 xmlns=%27http://www.w3.org/2000/svg%27 width=%2710px%27 height=%2710px%27%3E %3Cpolygon fill=%27%23' + color + '%27 stroke=%27none%27 points=%278.589,6.945 5,3.22 1.413,6.945 1.052,6.598 5,2.499 8.948,6.598%27 /%3E %3C/svg%3E';\n};\n\nconst fmtProp = (value, unit = 'px') => {\n    return typeof value === 'number' ? value + unit : value;\n};\n\nconst scroller = new SweetScroll();\n\nexport default {\n    props: {\n        size: {\n            type: Number,\n            default: 70\n        },\n        right: {\n            type: [String, Number],\n            default: 50\n        },\n        bottom: {\n            type: [String, Number],\n            default: 100\n        },\n        bottomGap: {\n            type: [String, Number],\n            default: 0\n        },\n        zIndex: {\n            type: Number,\n            default: 1000\n        },\n        fgColor: {\n            type: String,\n            default: '#ffffff'\n        },\n        bgColor: {\n            type: String,\n            default: '#ffc966'\n        },\n        radius: {\n            type: [String, Number],\n            default: '50%'\n        },\n        weight: {\n            type: String,\n            default: 'normal'\n        },\n        rippleBg: {\n            type: String,\n            default: 'rgba(255, 255, 255, .5)'\n        },\n        boundary: {\n            type: Number,\n            default: 200\n        },\n        maxWidth: {\n            type: Number,\n            default: 640\n        },\n        src: {\n            type: String,\n            default: null\n        },\n        alt: {\n            type: String,\n            default: ''\n        },\n        hasOutline: {\n            type: Boolean,\n            default: true\n        },\n        boxShadow: {\n            type: String,\n            default: '1px 1px 2px rgba(0, 0, 0, .3)'\n        }\n    },\n    data() {\n        const outline = this.hasOutline ? {} : { outline: '0 none' };\n        return {\n            enabled: false,\n            isActive: false,\n            isRippleActive: false,\n            mainStyle: {\n                width: fmtProp(this.size),\n                height: fmtProp(this.size),\n                right: fmtProp(this.right),\n                bottom: `calc(${fmtProp(this.bottom)} - ${fmtProp(this.bottomGap)})`,\n                zIndex: this.zIndex,\n                color: this.fgColor,\n                backgroundColor: this.bgColor,\n                backgroundImage: `url(\"${makeBgImage(this.weight, this.fgColor)}\")`,\n                backgroundSize: `${this.size} auto`,\n                boxShadow: this.boxShadow,\n                opacity: this.opacity,\n                borderRadius: fmtProp(this.radius),\n                ...outline,\n            },\n            rippleStyle: {\n                top: fmtProp(-this.size),\n                left: fmtProp(-this.size),\n                width: '200%',\n                height: '200%',\n                backgroundColor: this.rippleBg\n            },\n            throttleScroll: null,\n            throttleResize: null\n        };\n    },\n    created() {\n        this.handleResize();\n        this.throttleScroll = throttle(THROTTLE_DELAY, this.handleScroll);\n        this.throttleResize = throttle(THROTTLE_DELAY, this.handleResize);\n        window.addEventListener('resize', this.throttleResize);\n        window.addEventListener('scroll', this.throttleScroll);\n    },\n    beforeDestroy() {\n        if (this.throttleResize) {\n            window.removeEventListener('resize', this.throttleResize);\n        }\n        if (this.throttleScroll) {\n            window.removeEventListener('scroll', this.throttleScroll);\n        }\n    },\n    methods: {\n        clickHandle(e) {\n            if (!this.isRippleActive) {\n                const elTarget = e.target;\n                if (elTarget) {\n                    const rect = elTarget.getBoundingClientRect();\n                    const top = e.clientY - rect.top;\n                    const left = e.clientX - rect.left;\n                    this.rippleStyle.top = fmtProp(top - this.size);\n                    this.rippleStyle.left = fmtProp(left - this.size);\n                }\n                this.isRippleActive = true;\n                setTimeout(() => {\n                    this.isRippleActive = false;\n                }, RIPPLE_DURATION);\n            }\n            scroller.to(0);\n        },\n        handleScroll() { // toggle display by scrolling.\n            this.isActive = window.pageYOffset > this.boundary;\n        },\n        handleResize() {\n            if (this.maxWidth > 0) {\n                this.enabled = !window.matchMedia(`(max-width: ${this.maxWidth}px)`).matches;\n            } else {\n                this.enabled = true;\n            }\n        },\n        keyEnter(e) {\n            if (e.keyCode === KEY_ENTER) {\n                scroller.to(0);\n            }\n        }\n    },\n};\n",{"version":3,"sources":["GoTop.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"GoTop.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <transition name=\"vue-go-top\">\n        <div\n                v-if=\"isActive && enabled\"\n                :style=\"mainStyle\"\n                role=\"button\"\n                tabindex=\"1\"\n                class=\"vue-go-top\"\n                @click.prevent=\"clickHandle\"\n                @keydown.prevent=\"keyEnter\">\n            <div\n                    v-if=\"src !== null\"\n                    class=\"vue-go-top__icon\">\n                <img\n                        :src=\"src\"\n                        :alt=\"alt\"\n                        class=\"vue-go-top__image\">\n                <div\n                        :is-active=\"isRippleActive\"\n                        :style=\"rippleStyle\"\n                        class=\"vue-go-top__ripple\"/>\n            </div>\n            <div\n                    v-else\n                    class=\"vue-go-top__content\">\n                <div\n                        :is-active=\"isRippleActive\"\n                        :style=\"rippleStyle\"\n                        class=\"vue-go-top__ripple\"/>\n                <slot/>\n            </div>\n        </div>\n    </transition>\n</template>\n\n<script>\n    import { throttle } from 'throttle-debounce';\n    import SweetScroll from 'sweet-scroll';\n\n    const KEY_ENTER = 13;\n    const RIPPLE_DURATION = 750;\n    const THROTTLE_DELAY = 100;\n\n    const makeBgImage = (weight, fgColor) => {\n        const color = fgColor.replace(/^#/, '');\n        if (weight === 'bold') {\n            return 'data:image/svg+xml;charset=utf8, %3Csvg version=%271.1%27 xmlns=%27http://www.w3.org/2000/svg%27 width=%2710px%27 height=%2710px%27%3E %3Cpolygon fill=%27%23' + color + '%27 stroke=%27none%27 points=%278.646,7.354 5,3.707 1.354,7.354 0.646,6.646 5,2.293 9.354,6.646%27 /%3E %3C/svg%3E';\n        }\n        return 'data:image/svg+xml;charset=utf8,%3Csvg version=%271.1%27 xmlns=%27http://www.w3.org/2000/svg%27 width=%2710px%27 height=%2710px%27%3E %3Cpolygon fill=%27%23' + color + '%27 stroke=%27none%27 points=%278.589,6.945 5,3.22 1.413,6.945 1.052,6.598 5,2.499 8.948,6.598%27 /%3E %3C/svg%3E';\n    };\n\n    const fmtProp = (value, unit = 'px') => {\n        return typeof value === 'number' ? value + unit : value;\n    };\n\n    const scroller = new SweetScroll();\n\n    export default {\n        props: {\n            size: {\n                type: Number,\n                default: 70\n            },\n            right: {\n                type: [String, Number],\n                default: 50\n            },\n            bottom: {\n                type: [String, Number],\n                default: 100\n            },\n            bottomGap: {\n                type: [String, Number],\n                default: 0\n            },\n            zIndex: {\n                type: Number,\n                default: 1000\n            },\n            fgColor: {\n                type: String,\n                default: '#ffffff'\n            },\n            bgColor: {\n                type: String,\n                default: '#ffc966'\n            },\n            radius: {\n                type: [String, Number],\n                default: '50%'\n            },\n            weight: {\n                type: String,\n                default: 'normal'\n            },\n            rippleBg: {\n                type: String,\n                default: 'rgba(255, 255, 255, .5)'\n            },\n            boundary: {\n                type: Number,\n                default: 200\n            },\n            maxWidth: {\n                type: Number,\n                default: 640\n            },\n            src: {\n                type: String,\n                default: null\n            },\n            alt: {\n                type: String,\n                default: ''\n            },\n            hasOutline: {\n                type: Boolean,\n                default: true\n            },\n            boxShadow: {\n                type: String,\n                default: '1px 1px 2px rgba(0, 0, 0, .3)'\n            }\n        },\n        data() {\n            const outline = this.hasOutline ? {} : { outline: '0 none' };\n            return {\n                enabled: false,\n                isActive: false,\n                isRippleActive: false,\n                mainStyle: {\n                    width: fmtProp(this.size),\n                    height: fmtProp(this.size),\n                    right: fmtProp(this.right),\n                    bottom: `calc(${fmtProp(this.bottom)} - ${fmtProp(this.bottomGap)})`,\n                    zIndex: this.zIndex,\n                    color: this.fgColor,\n                    backgroundColor: this.bgColor,\n                    backgroundImage: `url(\"${makeBgImage(this.weight, this.fgColor)}\")`,\n                    backgroundSize: `${this.size} auto`,\n                    boxShadow: this.boxShadow,\n                    opacity: this.opacity,\n                    borderRadius: fmtProp(this.radius),\n                    ...outline,\n                },\n                rippleStyle: {\n                    top: fmtProp(-this.size),\n                    left: fmtProp(-this.size),\n                    width: '200%',\n                    height: '200%',\n                    backgroundColor: this.rippleBg\n                },\n                throttleScroll: null,\n                throttleResize: null\n            };\n        },\n        created() {\n            this.handleResize();\n            this.throttleScroll = throttle(THROTTLE_DELAY, this.handleScroll);\n            this.throttleResize = throttle(THROTTLE_DELAY, this.handleResize);\n            window.addEventListener('resize', this.throttleResize);\n            window.addEventListener('scroll', this.throttleScroll);\n        },\n        beforeDestroy() {\n            if (this.throttleResize) {\n                window.removeEventListener('resize', this.throttleResize);\n            }\n            if (this.throttleScroll) {\n                window.removeEventListener('scroll', this.throttleScroll);\n            }\n        },\n        methods: {\n            clickHandle(e) {\n                if (!this.isRippleActive) {\n                    const elTarget = e.target;\n                    if (elTarget) {\n                        const rect = elTarget.getBoundingClientRect();\n                        const top = e.clientY - rect.top;\n                        const left = e.clientX - rect.left;\n                        this.rippleStyle.top = fmtProp(top - this.size);\n                        this.rippleStyle.left = fmtProp(left - this.size);\n                    }\n                    this.isRippleActive = true;\n                    setTimeout(() => {\n                        this.isRippleActive = false;\n                    }, RIPPLE_DURATION);\n                }\n                scroller.to(0);\n            },\n            handleScroll() { // toggle display by scrolling.\n                this.isActive = window.pageYOffset > this.boundary;\n            },\n            handleResize() {\n                if (this.maxWidth > 0) {\n                    this.enabled = !window.matchMedia(`(max-width: ${this.maxWidth}px)`).matches;\n                } else {\n                    this.enabled = true;\n                }\n            },\n            keyEnter(e) {\n                if (e.keyCode === KEY_ENTER) {\n                    scroller.to(0);\n                }\n            }\n        },\n    };\n</script>\n\n<style lang=\"scss\" scoped>\n    .vue-go-top {\n        overflow: hidden;\n        position: fixed;\n        cursor: pointer;\n        background-repeat: no-repeat;\n        background-position: 50% 50%;\n        background-size: 70% auto;\n        white-space: nowrap;\n        text-indent: 100%;\n\n        &__content {\n            position: relative;\n            left: 0;\n            top: 0;\n            width: 100%;\n            height: 100%;\n        }\n\n        &__ripple {\n            position: absolute;\n            border-radius: 50%;\n            transform: scale(0);\n            opacity: 0;\n            pointer-events: none;\n\n            &[is-active] {\n                animation: vue-go-top-ripple-animation .75s ease-out;\n            }\n        }\n\n        &__icon {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n        }\n\n        &__image {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            object-fit: cover;\n        }\n    }\n\n    .vue-go-top-enter-active,\n    .vue-go-top-leave-active {\n        transition: opacity .3s, transform .3s;\n    }\n    .vue-go-top-enter,\n    .vue-go-top-leave-to {\n        opacity: 0;\n        transform: translateY(50px);\n    }\n\n    @keyframes vue-go-top-ripple-animation {\n        from {\n            opacity: 1;\n        }\n        to {\n            transform: scale(2);\n            opacity: 0;\n        }\n    }\n</style>"]}]}